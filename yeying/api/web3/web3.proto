syntax = "proto3";
package yeying.api.web3;
option go_package = "yeying/api/web3";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
// 添加 Swagger 文档元数据
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Yeying API";
    version: "1.0";
    contact: {
      name: "yeying-community";
      url: "https://github.com/yeying-community/yeying-idl.git";
      email: "yeying.community@gmail.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

// 身份编码
enum IdentityCodeEnum {
  // 未知编码，是一种占位符
  IDENTITY_CODE_UNKNOWN = 0;
  // 与个人相关的身份
  IDENTITY_CODE_PERSONAL = 1;
  // 与组织相关的身份
  IDENTITY_CODE_ORGANIZATION = 2;
  // 与服务相关的身份
  IDENTITY_CODE_SERVICE = 3;
  // 与应用相关的身份
  IDENTITY_CODE_APPLICATION = 4;
  // 与资产相关的身份
  IDENTITY_CODE_ASSET = 5;
}

// 区块链网络类型
enum NetworkTypeEnum {
  // 未知编码，是一种占位符
  NETWORK_TYPE_UNKNOWN = 0;

  // 夜莺网络
  NETWORK_TYPE_YEYING = 2020;
}

message Identity {
  IdentityMetadata metadata = 1;
  string blockAddress = 2;
  SecurityConfig securityConfig = 3;
  Registry registry = 4;
  string signature = 5;
  oneof extend {
    IdentityPersonalExtend personalExtend = 6;
    IdentityServiceExtend serviceExtend = 7;
    IdentityOrganizationExtend organizationExtend = 8;
    IdentityApplicationExtend applicationExtend = 9;
  }
}

message Registry {
  repeated string nodes = 1;
}

message IdentityMetadata {
  // 身份父亲
  string parent = 1;
  // 身份所在网络
  NetworkTypeEnum network = 2;
  // 身份did
  string did = 3;
  // 身份版本
  uint32 version = 4;
  // 区块链地址
  string address = 5;
  // 身份名称
  string name = 6;
  // 身份描述
  string description = 7;
  // 身份编码
  IdentityCodeEnum code = 8;
  // 身份头像
  string avatar = 9;
  // 身份创建utc时间
  string createdAt = 10;
  // 身份修改utc时间
  string updatedAt = 11;
}

message BlockAddress {
  string identifier = 1;
  string address = 2;
  string privateKey = 3;
  string publicKey = 4;
  Mnemonic mnemonic = 5;
}

message Mnemonic {
  string phrase = 1;
  string path = 2;
  string locale = 3;
  string password = 4;
}

message IdentityServiceExtend {
  string code = 1;
  string apiCodes = 2; // 应用输出的api编码，用逗号隔开
  string proxy = 3;
  string grpc = 4;
  string extend = 5;
}

message IdentityOrganizationExtend {
  string address = 1;
  string code = 2;
  string extend = 3;
}

message IdentityPersonalExtend {
  string email = 1;
  string telephone = 2;
  string extend = 3;
}

message IdentityApplicationExtend {
  string code = 1;
  string serviceCodes = 2; // 应用依赖的服务编码，用逗号隔开
  string location = 3 ;
  string hash = 4;
  string extend = 5;
}

message SecurityConfig {
  SecurityAlgorithm algorithm = 1;
}

message SecurityAlgorithm {
  string name = 1;
  string iv = 2;
}