syntax = "proto3";
option go_package = "yeying/api/llm";
package yeying.api.llm;

import "yeying/api/common/message.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
// 添加 Swagger 文档元数据
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Yeying API";
    version: "1.0";
    contact: {
      name: "yeying-community";
      url: "https://github.com/yeying-community/yeying-idl.git";
      email: "yeying.community@gmail.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service Provider {
  // 供应商描述列表
  rpc Descriptions(ProviderDescriptionsRequest) returns (ProviderDescriptionsResponse) {
    option (google.api.http) = {
      post: "/api/v1/provider/descriptions"
      body: "*"
    };
  }

  // 供应商模型
  rpc Models(ProviderModelsRequest) returns (ProviderModelsResponse) {
    option (google.api.http) = {
      post: "/api/v1/provider/models"
      body: "*"
    };
  }

  // 搜索添加的供应商
  rpc Search(SearchProviderRequest) returns (SearchProviderResponse) {
    option (google.api.http) = {
      post: "/api/v1/provider/search"
      body: "*"
    };
  }

  // 供应商状态
  rpc Detail(ProviderDetailRequest) returns (ProviderDetailResponse) {
    option (google.api.http) = {
      post: "/api/v1/provider/detail"
      body: "*"
    };
  }

  // 添加新供应商配置
  rpc Add(AddProviderRequest) returns (AddProviderResponse) {
    option (google.api.http) = {
      post: "/api/v1/provider/add"
      body: "*"
    };
  }

  // 删除供应商
  rpc Delete(DeleteProviderRequest) returns (DeleteProviderResponse) {
    option (google.api.http) = {
      post: "/api/v1/provider/delete"
      body: "*"
    };
  }
}

message ProviderDescriptionsRequest {
  common.MessageHeader header = 1;
}

message ProviderDescriptionsResponse {
  common.MessageHeader header = 1;
  ProviderDescriptionsResponseBody body = 2;
}

message ProviderDescriptionsResponseBody {
  common.ResponseStatus status = 1;
  repeated ProviderDescription descriptions = 2;
}

message ProviderModelsRequest {
  common.MessageHeader header = 1;
  ProviderModelsRequestBody body = 2;
}

message ProviderModelsRequestBody {
  ProviderCodeEnum code = 1;
  ModelTypeEnum modelType = 2;
}

message ProviderModelsResponse {
  common.MessageHeader header = 1;
  ProviderModelsResponseBody body = 2;
}

message ProviderModelsResponseBody {
  common.ResponseStatus status = 1;
  repeated ModelMetadata models = 2;
}

message DeleteProviderRequest {
  common.MessageHeader header = 1;
  DeleteProviderRequestBody body = 2;
}

message DeleteProviderRequestBody {
  string uid = 1;
}

message DeleteProviderResponse {
  common.MessageHeader header = 1;
  DeleteProviderResponseBody body = 2;
}

message DeleteProviderResponseBody {
  common.ResponseStatus status = 1;
}

message SearchProviderRequest {
  common.MessageHeader header = 1;
  SearchProviderRequestBody body = 2;
}

message SearchProviderRequestBody {
  common.RequestPage page = 1;
  SearchProviderCondition condition = 2;
}

message SearchProviderResponse {
  common.MessageHeader header = 1;
  SearchProviderResponseBody body = 2;
}

message SearchProviderResponseBody {
  common.ResponseStatus status = 1;
  repeated ProviderMetadata providers = 2;
}

message AddProviderRequest {
  common.MessageHeader header = 1;
  AddProviderRequestBody body = 2;
}

message AddProviderRequestBody {
  ProviderMetadata provider = 1;
}

message AddProviderResponse {
  common.MessageHeader header = 1;
  AddProviderResponseBody body = 2;
}

message AddProviderResponseBody {
  common.ResponseStatus status = 1;
  ProviderMetadata provider = 2;
}

message ProviderDetailRequest {
  common.MessageHeader header = 1;
  ProviderDetailRequestBody body = 2;
}

message ProviderDetailRequestBody {
  string uid = 1;
}

message ProviderDetailResponse {
  common.MessageHeader header = 1;
  ProviderDetailResponseBody body = 2;
}

message ProviderDetailResponseBody {
  common.ResponseStatus status = 1;
  ProviderDetail detail = 2;
}

message ProviderDetail {
  ProviderMetadata provider = 1;
  ProviderState state = 2;
}

message ProviderDescription {
  ProviderCodeEnum code = 1;
  string name = 2;
  string description = 3;
  repeated ModelTypeEnum supportedModelTypes = 4;
  string avatar = 5;
}

message SearchProviderCondition {
  ProviderCodeEnum code = 1;
}

message ProviderMetadata {
  string uid = 1;
  string owner = 2;
  string name = 3;
  ProviderCodeEnum code = 4;
  string config = 5;
  QuotaTypeEnum quotaType = 6;
  uint64 quotaLimit = 7;
  string createdAt = 8;
  string updatedAt = 9;
  string signature = 10;
}

message ModelMetadata {
  ProviderCodeEnum providerCode = 1;
  ModelTypeEnum type = 2;
  string name = 3;
  repeated ModelFeatureEnum features = 4;
}

message ProviderState {
  string serviceDid = 1;
  string uid = 2;
  ProviderStatusEnum status = 3;
  uint64 quotaUsed = 4;
  string createdAt = 5;
  string updatedAt = 6;
  string signature = 7;
}

enum ModelTypeEnum {
  MODEL_TYPE_UNKNOWN = 0;
  MODEL_TYPE_LLM = 1; // 文本生成模型
  MODEL_TYPE_TEXT_EMBEDDING = 2; // 文本 Embedding 模型
  MODEL_TYPE_RERANK = 3;// Rerank 模型
  MODEL_TYPE_SPEECH2TEXT = 4; // 语音转文字
  MODEL_TYPE_TTS = 5; // 文字转语音
  MODEL_TYPE_MODERATION = 6; // 审查
  MODEL_TYPE_TEXT2IMAGE = 7; // 文生图
}

enum ModelFeatureEnum {
  MODEL_FEATURE_AGENT_THOUGHT = 0; // 推理，一般超过 70B 有思维链能力。
  MODEL_FEATURE_VISION = 2; // 视觉，即：图像理解。
  MODEL_FEATURE_TOOL_CALL = 3; // 工具调用
  MODEL_FEATURE_MULTI_TOOL_CALL = 4; // 多工具调用
  MODEL_FEATURE_STREAM_TOOL_CALL = 5; // 流式工具调用
  MODEL_FEATURE_DOCUMENT = 6; // 文档
  MODEL_FEATURE_VIDEO = 7; // 视频
  MODEL_FEATURE_AUDIO = 8; // 音频
}

enum ProviderCodeEnum {
  PROVIDER_CODE_UNKNOWN = 0;
  PROVIDER_CODE_OPENAI = 1; // openai
  PROVIDER_CODE_TONGYI = 2; // tongyi
  PROVIDER_CODE_ZHIPUAI = 3; // zhipu
  PROVIDER_CODE_GROK = 4; // grok
  PROVIDER_CODE_DEEPSEEK = 5; // deepseek
}

enum ProviderStatusEnum {
  PROVIDER_STATUS_UNKNOWN = 0; // 未知编码，是一种占位符
  PROVIDER_STATUS_UNAVAILABLE = 1; // 供应商不可用
  PROVIDER_STATUS_AVAILABLE = 2; // 供应商可用
}

enum QuotaTypeEnum {
  QUOTA_TYPE_UNKNOWN = 0; // 未知编码，是一种占位符
  QUOTA_TYPE_PAID = 1;
  QUOTA_TYPE_FREE = 2;
  QUOTA_TYPE_TRIAL = 3;
}