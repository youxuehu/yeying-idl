syntax = "proto3";
option go_package = "yeying/api/llm";
package yeying.api.llm;

import "yeying/api/common/message.proto";
import "yeying/api/common/code.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
// 添加 Swagger 文档元数据
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Yeying API";
    version: "1.0";
    contact: {
      name: "yeying-community";
      url: "https://github.com/yeying-community/yeying-idl.git";
      email: "yeying.community@gmail.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service Llm {
  // 不同语言的文字翻译工作
  rpc Translate(TranslateRequest) returns (TranslateResponse){
    option (google.api.http) = {
      post: "/api/v1/llm/translate"
      body: "*"
    };
  }

  // 内容补全
  rpc Complete(CompleteRequest) returns (stream CompleteResponse){
    option (google.api.http) = {
      post: "/api/v1/llm/complete"
      body: "*"
    };
  }

  // 编辑图片
  rpc Edit(EditRequest) returns (stream EditResponse){
    option (google.api.http) = {
      post: "/api/v1/llm/edit"
      body: "*"
    };
  }

  // 文本生成图片
  rpc Generate(GenerateRequest) returns (stream GenerateResponse){
    option (google.api.http) = {
      post: "/api/v1/llm/generate"
      body: "*"
    };
  }

  // 文本生语音
  rpc Speech(SpeechRequest) returns (SpeechResponse){
    option (google.api.http) = {
      post: "/api/v1/llm/speech"
      body: "*"
    };
  }
}

message CompleteRequest {
  common.MessageHeader header = 1;
  CompleteRequestBody body = 2;
}

message CompleteRequestBody {
  string sessionId = 1;
  string promptId = 2;
  string providerId = 3;
  string model = 4;
  bool stream = 5;
  repeated Message messages = 6;
}

message Message {
  MessageRoleEnum role = 1;
  Content content = 2;
}

message Content {
  ContentTypeEnum type = 1;
  string data = 2;
}

message Answer {
  string model = 1;
  string id = 2;
  int64 createdAt = 3;
  repeated Choice choices = 4;
}

// 对于流式响应的消息，设计一个统一的处理规则：采用三段式逻辑：header、body、tailer，先发送头部，然后发送数据，最后发送尾部
// 头部通常是消息描述
// 数据通常是本次消息的业务数据
// 尾部通常是消息描述
message CompleteResponse {
  oneof data {
    CompleteResponseHead head = 2;
    CompleteResponseBody body = 3;
    CompleteResponseTail tail = 4;
  }
}

message CompleteResponseHead {
  common.MessageHeader header = 1;
  CompleteResponseHeadBody body = 2;
}

message CompleteResponseHeadBody {
  common.ResponseStatus status = 1;
}

message CompleteResponseBody {
  string data = 1;
}

message CompleteResponseTail {
  common.MessageHeader header = 1;
  CompleteResponseTailBody body = 2;
}

message CompleteResponseTailBody {
  common.ResponseStatus status = 1;
}

message GenerateRequest {
  common.MessageHeader header = 1;
  GenerateRequestBody body = 2;
}

message GenerateRequestBody {
  string llmId = 1;
  string model = 2;
  string prompt = 3;
  common.ContentFormatEnum responseContentFormat = 4;
  int32 count = 5;
  string size = 6;
  string quality = 7;
  string style = 8;
}

message GenerateResponse {
  oneof data {
    GenerateResponseHead head = 2;
    GenerateResponseBody body = 3;
    GenerateResponseTail tail = 4;
  }
}

message GenerateResponseHead {
  common.MessageHeader header = 1;
  GenerateResponseHeadBody body = 2;
}

message GenerateResponseHeadBody {
  common.ResponseStatus status = 1;
}

// 根据请求时要求返回的格式确定具体内容，可能是base64编码，也可能是一个地址
message GenerateResponseBody {
  string data = 1;
}

message GenerateResponseTail {
  common.MessageHeader header = 1;
  GenerateResponseTailBody body = 2;
}

message GenerateResponseTailBody {
  common.ResponseStatus status = 1;
}

message TextPrompt {
  string message = 1;
}

message ImagePrompt {
  string message = 1;
  bytes mask = 2;
  bytes image = 3;
}

message ImageResult {
  common.ContentFormatEnum responseContentFormat = 1;
  int32 count = 2;
  string size = 3;
  string quality = 4;
  string style = 5;
}

message EditRequest {
  string did = 1;
  string llmId = 2;
  string model = 3;

  common.DigitalFormatEnum srcType = 5;
  common.DigitalFormatEnum desType = 6;
  oneof prompt {
    TextPrompt textPrompt = 7;
    ImagePrompt imagePrompt = 8;
  }

  oneof result {
    ImageResult imageResult = 9;
  }
}

message EditResponse {
  common.ResponseStatus status = 1;
  oneof data {
    string base64 = 2;
    bytes bytes = 3;
  }
}

message TranslateRequest {
  string did = 1;
  string llmId = 2;
  string instance = 3;
}

message TranslateResponse {
  common.ResponseStatus status = 1;
}

message ConvertRequest {
  string did = 1;
  string llmId = 2;
  string instance = 3;
}

message ConvertResponse {
  common.ResponseStatus status = 1;
}

message Choice {
  int32 index = 1;
  MessageRoleEnum role = 2;
  Content content = 3;
  string finishReason = 4;
}

message SpeechRequest {

}

message SpeechResponse {

}

// 消息角色，在大模型进行推理时，涉及到多个系统组件的配合，有设定场景的，有理解意图的，有给出答案的等等。
enum MessageRoleEnum {
  MESSAGE_ROLE_UNKNOWN = 0; // 未知编码，是一种占位符
  MESSAGE_ROLE_ASSISTANT = 1; // 对话系统的回复内容，模型将会根据前面的对话历史和用户的输入生成相应的回复
  MESSAGE_ROLE_USER = 2; // 用于用户输入的对话内容，当用户想要与对话模型交互时
  MESSAGE_ROLE_SYSTEM = 3; // 用于系统级别的提示和指导，比如问候、提示用户进行某项操作或介绍对话规则等
}

enum ContentTypeEnum {
  CONTENT_TYPE_UNKNOWN = 0;
  CONTENT_TYPE_TEXT = 1;
  CONTENT_TYPE_IMAGE = 2;
  CONTENT_TYPE_AUDIO = 3;
  CONTENT_TYPE_VIDEO = 4;
  CONTENT_TYPE_DOCUMENT = 5;
}