syntax = "proto3";
option go_package = "yeying/api/identity";
package yeying.api.identity;

import "yeying/api/common/message.proto";
import "yeying/api/common/code.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
// 添加 Swagger 文档元数据
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Yeying API";
    version: "1.0";
    contact: {
      name: "yeying-community";
      url: "https://github.com/yeying-community/yeying-idl.git";
      email: "yeying.community@gmail.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};


// 提供身份托管和维护服务，目前还不支持托管加密的身份，需要有资质，需要补齐的能力；
// 1、至少二要素身份认证；
// 2、保护隐私零知识证名；
// 2、支持密钥恢复；
// 3、服务器故障导致丢失，需要支持分散式存储；
// 4、支持加密硬件；
// 5、至少要两把密钥，一把由身份所有者保管，一把是服务保管；
service Identity {
  // 身份托管
  rpc Deposit(DepositRequest) returns (DepositResponse) {
    option (google.api.http) = {
      post: "/api/v1/identity/deposit"
      body: "*"
    };
  }

  // 取回身份
  rpc Retrieve(RetrieveRequest) returns (RetrieveResponse) {
    option (google.api.http) = {
      post: "/api/v1/identity/retrieve"
      body: "*"
    };
  }

  // 查询身份名片
  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      post: "/api/v1/identity/query"
      body: "*"
    };
  }

  // 分享身份名片
  rpc Share(ShareRequest) returns (ShareResponse) {
    option (google.api.http) = {
      post: "/api/v1/identity/share"
      body: "*"
    };
  }

  // 取消托管
  rpc Cancel(CancelRequest) returns (CancelResponse) {
    option (google.api.http) = {
      post: "/api/v1/identity/cancel"
      body: "*"
    };
  }
}

message DepositRequest {
  common.MessageHeader header = 1;
  DepositRequestBody body = 2;
}

message DepositRequestBody {
  string cipher = 1;
  string protocol = 2;
}

message DepositResponse {
  common.MessageHeader header = 1;
  DepositResponseBody body = 2;
}

message DepositResponseBody {
  common.ResponseStatus status = 2;
}

message RetrieveRequest {
  common.MessageHeader header = 1;
}

message RetrieveResponse {
  common.MessageHeader header = 1;
}

message ShareRequest {
  common.MessageHeader header = 1;
}

message ShareResponse {
  common.MessageHeader header = 1;
}

message QueryRequest {
  common.MessageHeader header = 1;
  QueryRequestBody body = 2 ;
}

message QueryRequestBody {
  common.ServiceCodeEnum serviceCode = 1;
}

message QueryResponse {
  common.MessageHeader header = 1;
  QueryResponseBody body = 2;
}

message QueryResponseBody {
  common.ResponseStatus status = 1;
  string cipher = 2;
  string protocol = 3;
}

message CancelRequest {
  common.MessageHeader header = 1;
  CancelRequestBody body = 2;
}

message CancelRequestBody {
  string did = 1;
}

message CancelResponse {
  common.MessageHeader header = 1;
  CancelResponseBody body = 2;
}

message CancelResponseBody {
  common.ResponseStatus status = 1;
}