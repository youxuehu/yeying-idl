syntax = "proto3";
option go_package = "yeying/api/event";
package yeying.api.event;

import "yeying/api/common/message.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
// 添加 Swagger 文档元数据
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Yeying API";
    version: "1.0";
    contact: {
      name: "yeying-community";
      url: "https://github.com/yeying-community/yeying-idl.git";
      email: "yeying.community@gmail.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service Event {
  // 某个服务作为客户端生成了事件，通常node会实现服务端，然后同步给用户
  rpc Produce(ProduceRequest) returns (ProduceResponse){
    option (google.api.http) = {
      post: "/api/v1/event/produce"
      body: "*"
    };
  }

  // 用户直接向生成事件的服务消费并给出处理意见
  rpc Consume(ConsumeRequest) returns (ConsumeResponse){
    option (google.api.http) = {
      post: "/api/v1/event/consume"
      body: "*"
    };
  }
}


enum EventTypeEnum {
  // 未知事件类型，是一种占位符
  EVENT_TYPE_UNKNOWN = 0;

  // 提醒事件，需要被通知方查看事件，比如生日提醒、会议提醒等
  EVENT_TYPE_REMIND = 1;

  // 通知事件，需要被通知方获取内容，通常是信息比较大，并发生了更新，需要用户按需获取
  EVENT_TYPE_NOTIFY = 2;

  // 申请事件，需要被通知方做出通过或者拒绝，比如审核账户、网络准入等
  EVENT_TYPE_APPLY = 3;

  // 自定义事件，需要被通知方基于事件内容做出响应行动
  EVENT_TYPE_CUSTOM = 4;
}

enum ApplyActionEnum {
  // 未知申请事件的行为类型，是一种占位符
  APPLY_ACTION_UNKNOWN = 0;

  // 申请通过
  APPLY_ACTION_PASSED = 1;

  // 申请拒绝
  APPLY_ACTION_REFUSED = 2;
}

enum NotifyActionEnum {
  // 未知通知事件的行为类型，是一种占位符
  NOTIFY_ACTION_UNKNOWN = 0;

  // 增加
  NOTIFY_ACTION_ADD = 1;

  // 删除
  NOTIFY_ACTION_DEL = 2;

  // 修改
  NOTIFY_ACTION_MOD = 3;
}

message EventMetadata {
  string uid = 1;
  EventTypeEnum type = 2;
  repeated string producers = 3;
  repeated string consumers = 4;
  EventSignature signature = 5;
  string extend = 6;
  string createdAt = 7;
  string processedAt = 8;
  oneof content {
    NotifyContent notifyContent = 9;
    ApplyContent applyContent = 10;
    CustomContent customContent = 11;
  }
  oneof opinion {
    NotifyOpinion notifyOpinion = 12;
    ApplyOpinion applyOpinion = 13;
    CustomOpinion customOpinion = 14;
  }
}

message SignatureObject {
  string uid = 1;
  EventTypeEnum type = 2;
  repeated string  producers = 3;
  repeated string  consumers = 4;
  bytes signature = 5;
  string extend = 6;
  string createdAt = 7;
  string processedAt = 8;
  bytes opinion = 9;
  bytes content = 10;
}

message EventSignature {
  repeated string producers = 1;
  repeated string consumers = 2;
}

message CustomContent {
  string name = 1;
  string object = 2;
}

message ApplyContent {
  string applier = 1;
}

message NotifyContent {
  string name = 1;
  repeated NotifyItem items = 2;
}

message NotifyItem {
  string uid = 1;
  NotifyActionEnum action = 2;
}

message ProduceRequest {
  common.MessageHeader header = 1;
  ProduceRequestBody body = 2;
}

message ProduceRequestBody {
  EventMetadata event = 1;
}

message ProduceResponse {
  common.MessageHeader header = 1;
  ProduceResponseBody body = 2;
}

message ProduceResponseBody {
  common.ResponseStatus status = 1;
}
message ConsumeRequest {
  common.MessageHeader header = 1;
  ConsumeRequestBody body = 2;
}

message ConsumeRequestBody {
  EventMetadata metadata = 1;
}

message NotifyOpinion {
  string processed = 1;
}

message ApplyOpinion {
  ApplyActionEnum action = 1;
  string cause = 2;
  string processed = 3;
}

message CustomOpinion {
  string name = 1;
  string object = 2;
}

message ConsumeResponse {
  common.MessageHeader header = 1;
  ConsumeResponseBody body = 2;
}

message ConsumeResponseBody {
  common.ResponseStatus status = 1;
}