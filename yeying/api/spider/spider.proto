syntax = "proto3";
option go_package = "yeying/api/plugin";
package yeying.api.plugin;

import "yeying/api/common/message.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
// 添加 Swagger 文档元数据
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Yeying API";
    version: "1.0";
    contact: {
      name: "yeying-community";
      url: "https://github.com/yeying-community/yeying-idl.git";
      email: "yeying.community@gmail.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service Spider {
  // 搜索
  rpc Search(SearchRequest) returns (SearchResponse) {
    option (google.api.http) = {
      post: "/api/v1/spider/search"
      body: "*"
    };
  };

  // 安装
  rpc Install(InstallRequest) returns (InstallResponse) {
    option (google.api.http) = {
      post: "/api/v1/spider/install"
      body: "*"
    };
  };

  // 升级
  rpc Upgrade(InstallRequest) returns (InstallResponse) {
    option (google.api.http) = {
      post: "/api/v1/spider/upgrade"
      body: "*"
    };
  };

  // 配置
  rpc Config(InstallRequest) returns (InstallResponse) {
    option (google.api.http) = {
      post: "/api/v1/spider/config"
      body: "*"
    };
  };

  // 卸载
  rpc Remove(UninstallRequest) returns (UninstallResponse) {
    option (google.api.http) = {
      post: "/api/v1/spider/remove"
      body: "*"
    };
  };
}

// 为不同的应用开发的插件
enum PluginType {
  // 为浏览器开发的插件
  WEB = 0;

  // 为spider引擎开发的插件
  SPIDER = 1;
}

message SearchRequest {
  string owner = 1;
  repeated Condition conditionList = 2;
}

message Condition {
  string sql = 1;
}

message SearchResponse {
  repeated PluginItem pluginItemList = 1;
}

message PluginItem {
  // 插件名称
  string name = 1;

  // 插件描述
  string description = 3;

  // 插件版本
  string version = 2;

  // 代码片段或者安装包地址
  string code = 4;

  // 安装的时间
  int64 timestamp = 5;
}

message InstallRequest {
  // 谁安装
  string owner = 1;

  // 插件版本，版本格式必须为major.minor.patch，当用户安装插件的时候，如果没有指定版本，会根据插件code的哈希值来判断，如果是哈希值已经存在，则
  // 直接返回用户插件已经安装，否则的话，自动在patch上增加1，生成一个新的版本。
  string version = 2;

  // 插件名称
  string name = 3;

  // 插件描述
  string description = 4;

  // 代码片段或者安装包地址
  string code = 5;

  // 插件扩展信息
  string extend = 6;
}

message UninstallRequest {
  // 谁安装谁卸载
  string owner = 1;

  // 插件名称
  string name = 2;
}

message UninstallResponse {
  common.ResponseStatus responseStatus = 1;
}

message InstallResponse {
  common.ResponseStatus responseStatus = 1;
}
