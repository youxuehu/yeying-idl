syntax = "proto3";
option go_package = "yeying/api/correction";
package yeying.api.correction;
import "yeying/api/common/message.proto";
import "google/protobuf/wrappers.proto";
import "yeying/api/correction/imagecontent.proto";
import "yeying/api/correction/meta.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
// 添加 Swagger 文档元数据
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Yeying API";
    version: "1.0";
    contact: {
      name: "yeying-community";
      url: "https://github.com/yeying-community/yeying-idl.git";
      email: "yeying.community@gmail.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

/**
老师教学任务管理
对应的 DB 表：correction.teaching_tasks
 */
service Task {
  // 创建任务：由老师负创建教学任务
  rpc Add(AddTaskRequest) returns (AddTaskResponse) {
    option (google.api.http) = {
      post: "/api/v1/task/add"
      body: "*"
    };
  }
  // 任务详情
  rpc Detail(DetailTaskRequest) returns (DetailTaskResponse) {
    option (google.api.http) = {
      post: "/api/v1/task/detail"
      body: "*"
    };
  }
  // 查询老师名下总的任务列表
  rpc List(ListTaskRequest) returns (ListTaskResponse) {
    option (google.api.http) = {
      post: "/api/v1/task/list"
      body: "*"
    };
  }
  // 查询老师名下创建的 tag 名下对应的任务数量
  rpc TagCount(TagCountTaskRequest) returns (TagCountTaskResponse) {
    option (google.api.http) = {
      post: "/api/v1/task/tagCount"
      body: "*"
    };
  }
  // 更新任务
  rpc Update(UpdateTaskRequest) returns (UpdateTaskResponse) {
    option (google.api.http) = {
      post: "/api/v1/task/update"
      body: "*"
    };
  }
  // 删除任务
  rpc Delete(DeleteTaskRequest) returns (DeleteTaskResponse) {
    option (google.api.http) = {
      post: "/api/v1/task/delete"
      body: "*"
    };
  }
}

// Add
message AddTaskRequest{
  common.MessageHeader header = 1;
  AddTaskRequestBody body = 2;
}

message AddTaskRequestBody {
  TaskMetadata meta = 1;
}

message AddTaskResponse{
  common.MessageHeader header = 1;
  AddTaskResponseBody body = 2;
}

message AddTaskResponseBody {
  common.ResponseStatus status = 1;
  TaskMetadata meta = 2;
}
// Detail
message DetailTaskRequest{
  common.MessageHeader header = 1;
  DetailTaskRequestBody body = 2;
}
message DetailTaskRequestBody {
  string uid = 1;
}

message DetailTaskResponse{
  common.MessageHeader header = 1;
  DetailTaskResponseBody body = 2;
}
message DetailTaskResponseBody {
  common.ResponseStatus status = 1;
  TaskMetadata meta = 2;
  // 关联学生列表
  repeated GroupMetaData studentList = 3;
}

// List
message ListTaskRequest{
  common.MessageHeader header = 1;
  ListTaskRequestBody body = 2;
}
message ListTaskRequestBody {
  TaskListCondition condition = 1;
  common.RequestPage page = 2;
}

message ListTaskResponse{
  common.MessageHeader header = 1;
  ListTaskResponseBody body = 2;
}
message ListTaskResponseBody {
  common.ResponseStatus status = 1;
  // repeated 表示 List
  repeated TaskMetadata list = 2;
  common.ResponsePage page = 3;
}

// tag 名下的任务数量
message TagCountTaskRequest {
  common.MessageHeader header = 1;
  TagCountTaskRequestBody body = 2;
}
message TagCountTaskRequestBody {
  // 登录用户did
  string did = 1;
}
message TagCountTaskResponse {
  common.MessageHeader header = 1;
  TagCountTaskResponseBody body = 2;
}
message TagCountTaskResponseBody {
  common.ResponseStatus status = 1;
  repeated TagCountMeta meta = 2;
}
// Update
message UpdateTaskRequest{
  common.MessageHeader header = 1;
  UpdateTaskRequestBody body = 2;
}
message UpdateTaskRequestBody {
  TaskMetadata meta = 1;
}

message UpdateTaskResponse {
  common.MessageHeader header = 1;
  UpdateTaskResponseBody body = 2;
}

message UpdateTaskResponseBody {
  common.ResponseStatus status = 1;
  TaskMetadata meta = 2;
}

// Delete
message DeleteTaskRequest{
  common.MessageHeader header = 1;
  DeleteTaskRequestBody body = 2;
}
message DeleteTaskRequestBody {
  string uid = 1;
}

message DeleteTaskResponse {
  common.MessageHeader header = 1;
  DeleteTaskResponseBody body = 2;
}

message DeleteTaskResponseBody {
  common.ResponseStatus status = 1;
  TaskMetadata meta = 2;
}

message TaskListCondition {
  string did = 1;
  string taskName = 2;
  string tagUid = 3;
  // 任务状态
  int32 status = 4;
  // 开始时间
  int64 startTime = 5;
  // 结束时间
  int64 endTime = 6;
  string description = 7;
}